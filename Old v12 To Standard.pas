program Micro;	{$B+}															{Set bundle bit so finder will use my icon}	{$R+}															{Do Math error checking}	{$T APPL MICR}										{set my file type and creator}	{$L MicroRsrc}										{Load my reasources (dialog boxes etc..)}	{$I TML:Library:MemTypes.ipas}		{Load all relavant include files}	{$I TML:Library:QuickDraw.ipas}	{$I TML:Library:OSIntf.ipas}	{$I TML:Library:ToolIntf.ipas}	{$I TML:Library:PackIntf.ipas}	{$I TML:Library:FileIo.iPas}	type		{My Types}		arr4=			array[1..4] of real;		{arrary of 4 reals}		ari4=			array[1..4] of integer;	{Arrary of 4 integers}		strtype=			string[10];							{string size to shrink record size} 		 		HeaderType=								{Header storage record definition} 			record 				Reply:SfReply;				{current File system reply from last load} 				NumParticle:Integer;	{counter holds number of particles in list} 				slopexy:real;					{other data for header} 				slopezy:real; 				Event:strtype; 				Date:strtype; 				operator:strtype; 				ShrinkFactZT:Real; 				ShrinkFactZM:Real; 				Magnification:Real; 				ZZO:Real; 				X:arr4; 				y:arr4; 				z:arr4; 				Beam:strtype; 				Plate:strtype; 				part:strtype; 				Rangetostar:strtype; 				Primary:strtype; 				Frag:strtype; 				a:strtype; 				p:strtype; 				M:strtype; 				FBL:strtype; 				NB:ari4;{Used for measuring energy of the particles} 				G1:ari4;{NB,G1, G2, G3 are the result of particles with} 				G2:ari4;{different energies there is one measurement} 				G3:ari4;{for each quadrant} 				NH:ari4; 				energyQ:arr4; 				energytotal:real; 				NHtotal:integer; 				FtoBBlack:real; 				FtoBGrey:real; 				BBL:strtype; 				ShrinkFactAN:Real; 				dipofprimary:real; 				dummy1:real;					{dummy's in case they need more info}				dummy2:real;				dummy3:real;				dummy4:real;				dummy5:real;				dummy6:real;				dummy7:real;				dummy8:real;				dummy9:strtype;				dummy0:strtype; 			end;		ParticlePtr=							{pointers are used to access particles in list because list can hold}			^ParticleType;					{only 32K of data not much for particles 212 bytes long so only a pointer}															{to the data is saved in the list leaving about max 3000 particle}															 		ParticleType=							{Holds each particle information} 			record 				Number:strtype;				{Particle information} 				xsec:real; 				ysec:real; 				zsec:real; 				GrainCount:real; 				P:real; 				L:real;				beta:real;					{beta}				degrees:real;				{beta expressed in degrees}				azimuth:real;				{azimuth angle}				azidegree:real;			{azimuth angle expressed in degress}				pseudo:real;				{pseudoripidity}									{slope of children particles with respect to the primary}				deltax:real;						{the value calculated from the raw data}				deltay:real;						{the value calculated from the raw data}				deltaz:real;                         {the value calculated from the raw data}				bigx:real;				bigz:real;				deltar:real;				xstar:real;				ystar:real;				zstar:real;			end;  var    ReplyRead,ReplyWrite:SFReply;    input,Output:Text;{*******************************************************} Procedure OpenToReadStandard(Reply:SFReply);   Begin  	Close(input);  	Open(input,Reply.fname);    Reset(input);  end;   Procedure OpenToWriteStandard(Reply:SFReply);   Begin  	Close(Output);  	Open(Output,Reply.fname);    Rewrite(Output);  end;   Procedure CloseToReadStandard;   Begin    Close(input);  end;   Procedure CloseToWriteStandard;   Begin    Close(Output);  end;	procedure WriteParticleStandard(Particle:ParticleType);		begin			with Particle do				begin					writeln(OutPut,Particle.number);					writeln(OutPut,xsec:9:9); 				writeln(OutPut,ysec:9:9); 				writeln(OutPut,zsec:9:9); 				writeln(OutPut,GrainCount:9:9); 				writeln(OutPut,P:9:9); 				writeln(OutPut,L:9:9);					writeln(OutPut,beta:9:9);					writeln(OutPut,pseudo:9:9);					writeln(OutPut,azimuth:9:9);					writeln(OutPut,degrees:9:9);					writeln(OutPut,azidegree:9:9);					writeln(OutPut,deltax:9:9);					writeln(OutPut,deltay:9:9);					writeln(OutPut,deltaz:9:9);					writeln(OutPut,bigx:9:9);					writeln(OutPut,bigz:9:9);					writeln(OutPut,deltar:9:9);					writeln(OutPut,XStar:9:9);					writeln(OutPut,YStar:9:9);					writeln(OutPut,ZStar:9:9);				end;		end;	procedure WriteHeaderStandard(Header:HeaderType);		var			i:integer;		begin			with Header do				begin     writeln(Output,NumParticle);					writeln(OutPut,Beam); 				writeln(OutPut,Date); 				writeln(OutPut,Event); 				writeln(OutPut,operator); 				writeln(OutPut,Plate); 				writeln(OutPut,part); 				writeln(OutPut,Rangetostar); 				writeln(OutPut,ShrinkFactZT:9:9); 				writeln(OutPut,ShrinkFactZM:9:9); 				writeln(OutPut,ShrinkFactAN:9:9); 				writeln(OutPut,Magnification:9:9); 				writeln(OutPut,ZZO:9:9);     for i:= 1 to 4 do        begin 				       writeln(OutPut,X[i]:9:9); 				       writeln(OutPut,y[i]:9:9); 				       writeln(OutPut,z[i]:9:9);        end; 				writeln(OutPut,slopexy:9:9);	 				writeln(OutPut,slopezy:9:9); 				writeln(OutPut,Primary); 				writeln(OutPut,Frag); 				writeln(OutPut,a); 				writeln(OutPut,p); 				writeln(OutPut,M);     for i:= 1 to 4 do        begin 				       writeln(OutPut,NB[i]); 				       writeln(OutPut,G1[i]); 				       writeln(OutPut,G2[i]); 				       writeln(OutPut,G3[i]); 				       writeln(OutPut,NH[i]);            WriteLn(Output,energyQ[i]:9:9);        end;     {WriteLn(Output,FBlack:9:9);     WriteLn(Output,BBlack:9:9);     WriteLn(Output,NBlack:9:9);} 				WriteLn(Output,FtoBBlack:9:9);     {WriteLn(Output,FGrey:9:9);     WriteLn(Output,BGrey:9:9);     WriteLn(Output,NGrey:9:9);} 				WriteLn(Output,FtoBGrey:9:9);         WriteLn(Output,NHtotal);     WriteLn(Output,energytotal:9:9); 			end;		end;	procedure ReadParticleStandard(VAR Particle:ParticleType);		begin			with Particle do				begin					Readln(input,number);					Readln(input,xsec); 				Readln(input,ysec); 				Readln(input,zsec); 				Readln(input,GrainCount); 				Readln(input,P); 				Readln(input,L);					Readln(input,beta);					Readln(input,pseudo);					Readln(input,azimuth);					Readln(input,degrees);					Readln(input,azidegree);					Readln(input,deltax);					Readln(input,deltay);					Readln(input,deltaz);					Readln(input,bigx);					Readln(input,bigz);					Readln(input,deltar);					Readln(input,XStar);					Readln(input,YStar);					Readln(input,ZStar);				end;		end;	procedure ReadHeaderStandard(VAR Header:HeaderType);		var			i:integer;		begin			with Header do				begin     Readln(input,NumParticle);					Readln(input,Beam); 				Readln(input,Date); 				Readln(input,Event); 				Readln(input,operator); 				Readln(input,Plate); 				Readln(input,part); 				Readln(input,Rangetostar); 				Readln(input,ShrinkFactZT); 				Readln(input,ShrinkFactZM); 				Readln(input,ShrinkFactAN); 				Readln(input,Magnification); 				Readln(input,ZZO);     for i:= 1 to 4 do        begin 				       Readln(input,X[i]); 				       Readln(input,y[i]); 				       Readln(input,z[i]);        end; 				Readln(input,slopexy);	 				Readln(input,slopezy); 				Readln(input,Primary); 				Readln(input,Frag); 				Readln(input,a); 				Readln(input,p); 				Readln(input,M);     for i:= 1 to 4 do        begin 				       Readln(input,NB[i]); 				       Readln(input,G1[i]); 				       Readln(input,G2[i]); 				       Readln(input,G3[i]); 				       Readln(input,NH[i]);            Readln(input,energyQ[i]);        end;     {Readln(input,FBlack);     Readln(input,BBlack);     Readln(input,NBlack);} 				Readln(input,FtoBBlack);    { Readln(input,FGrey);     Readln(input,BGrey);     Readln(input,NGrey);} 				Readln(input,FtoBGrey);         Readln(input,NHtotal);     Readln(input,energytotal); 			end;		end;{*****************************} Procedure OpenToReadFileIo(VAR Reply:SFReply;VAR f:FileRec);   Begin    FReset(f,reply.vRefNum,reply.fName);  end;   Procedure OpenToWriteFileIo(VAR Reply:SFReply;Var f:FileRec);   Begin    FRewrite(f,reply.vRefNum,reply.fName,'DATA','MICR');  end;   Procedure CloseToReadFileIo( var f:FileRec);   Begin    FClose(f);  end;   Procedure CloseToWriteFileIo( var f:FileRec);   Begin    FClose(f);  end;	procedure WriteParticleFileIo(Particle:ParticleType;var f:FileRec);		begin		  FPutM(f,@Particle,SizeOf(Particle));		end;	procedure WriteHeaderFileIo(Header:HeaderType;var f:FileRec);		begin				FPutM(f,@Header,SizeOf(Header));		end;	procedure ReadParticleFileIo(VAR Particle:ParticleType;var f:FileRec);		begin    FGetM(f,@Particle,SizeOf(Particle));		end;	procedure ReadHeaderFileIo(VAR Header:HeaderType;var f:FileRec);		begin    FGetM(f,@Header,SizeOf(Header));		end;{**********************************************************************}			procedure GetReadFileStandard(var reply:SFReply);				var					pt:point;					FileType:SFTypeList;				begin					pt.h:=50;					pt.v:=50;					FileType[0][1]:='T';					FileType[0][2]:='E';					FileType[0][3]:='X';					FileType[0][4]:='T';					SFGetFile(pt,'Enter Standard File',nil,1,filetype,nil,reply);				end;	procedure GetReadFileFileIo(var reply:SFReply);				var					pt:point;					FileType:SFTypeList;				begin					pt.h:=50;					pt.v:=50;					FileType[0][1]:='D';					FileType[0][2]:='A';					FileType[0][3]:='T';					FileType[0][4]:='A';					SFGetFile(pt,'Enter FileIo File',nil,1,filetype,nil,reply);				end;  procedure GetWriteFile(var reply:SFReply);				var					pt:point;				begin					pt.h:=50;					pt.v:=50;					SFPutFile(pt,'Save File',Reply.Fname,nil,reply);				end;  Procedure ReadStandardWriteFileIo(ReplyRead:SFReply;                                  ReplyWrite:SFReply);  var   FileOut:FileRec;  Header:HeaderType;  Particle:ParticleType;  i:integer;    begin  OpenToReadStandard(ReplyRead);  OpenToWriteFileIo(ReplyWrite,FileOut);  ReadHeaderStandard(Header);  WriteHeaderFileIo(Header,FileOut);  for i := 1 to header.NumParticle do    begin      ReadParticleStandard(Particle);      WriteParticleFileIo(Particle,FileOut);    end;  CloseToReadStandard;  CloseToWriteFileIo(FileOut);end;Procedure ReadFileIoWriteStandard(ReplyRead:SFReply;ReplyWrite:SFReply);  var  FileIn:FileRec;  Header:HeaderType;  Particle:ParticleType;  i:integer;  begin  OpenToReadFileIo(ReplyRead,Filein);  OpenToWriteStandard(ReplyWrite);  ReadHeaderFileIo(Header,Filein);  WriteHeaderStandard(Header);  for i := 1 to header.NumParticle do    begin      ReadParticleFileIo(Particle,Filein);      WriteParticleStandard(Particle);    end;  CloseToReadFileIo(Filein);  CloseToWriteStandard;end;	procedure InitThings;				var       x : Longint;		begin			FlushEvents(everyEvent,0);			InitGraf(@thePort);			InitFonts;			InitWindows;			InitMenus;			TEInit;			InitDialogs(nil);			InitCursor;			InitAllPacks;    x := ORD4(ApplicZone) + 384000;				SetApplLimit(Pointer(x));				MaxApplZone;				MoreMasters;				MoreMasters;				MoreMasters;				MoreMasters;				MoreMasters;				MoreMasters;				SetBufSize(32769*2);		end;{***********************}	begin		initThings;		GetReadFileFileIo(ReplyRead);		GetWriteFile(ReplyWrite);  	ReadFileIoWriteStandard(ReplyRead,ReplyWrite);	end.