program Untitled; const  decacc = 5; var  theReal : real;  TheString : Str255; procedure NumToString (TheNumber : longint;         var TheString : Str255); begin  Writeln('NumToSTring ', TheNumber);  readln(TheString); end; procedure StringToNum (TheString : Str255;         var TheNumber : longint); begin  Writeln('StringToNum ', TheString);  readln(TheNumber); end; function Power10 (Expo : longint) : longint;  var   power : longint;   i : integer; begin  power := 1;  if power <> 0 then   for i := 1 to expo do    power := Power * 10;  power10 := Power; end; procedure RealToString (WholeNumber : Real;         var TheString : Str255);  var   integerPart, decimalPart : str255; begin  numToString(trunc(wholeNumber), IntegerPart);  numToString(round((wholeNumber - trunc(wholeNumber)) * power10(DecAcc)), decimalPart);  TheSTring := concat(IntegerPart, '.', copy('000000', 1, DecAcc - length(DecimalPart)), decimalPart); end; procedure StringToReal (WholeNumber : str255;         var TheReal : real);  var   decimalPos : integer;   IntegerPart : longint;   DecimalPart : longint;   zeros : integer; begin  DecimalPart := 0;  IntegerPart := 0;  DecimalPos := pos('.', WholeNumber);  if DecimalPos = 0 then   stringtonum(WholeNumber, IntegerPart)  else   begin    if DecimalPos <> 1 then     StringToNum(copy(WholeNumber, 1, DecimalPos - 1), integerpart);    Zeros := 0;    Delete(WholeNumber, 1, DecimalPos);    while copy(WholeNumber, 1, 1) = '0' do     begin      Delete(WholeNumber, 1, 1);      Zeros := Zeros + 1;     end;    wholeNumber := copy(WholeNumber, 1, DecAcc);    StringToNum(WholeNumber, DecimalPart);   end;  TheReal := IntegerPart + (DecimalPart / Power10(zeros + Length(WholeNumber))); end;begin readln(TheReal); RealToString(TheReal, TheString); writeln(TheString); readln(TheString); StringToReal(TheString, TheReal); writeln(TheReal : 9 : 9);end.